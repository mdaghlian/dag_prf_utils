#!/usr/bin/env python
#$ -j Y
#$ -cwd
#$ -V

import os
opj = os.path.join
import pickle
import sys
import numpy as np
import re
from dag_prf_utils.utils import dag_arg_checker, dag_hyphen_parse
from dag_prf_utils.prfpy_ts_plotter import TSPlotter
from dag_prf_utils.fs_tools import FSMaker

def main(argv):
    '''
    ---------------------------
    Auto open a subject surface with either numpy or pickle values

    Args:
        path        path to pickle/numpy file file
        sub         subject number
        fs_dir      freesurfer director
        outputdir   where to put it

    '''
    sub = None
    fs_dir = os.environ['SUBJECTS_DIR']
    model = None
    file_name = None 
    rsq_th = 0.1     
    open_fs = True  
    pars_to_plot = None
    extra_kwargs = {}
    for i,arg in enumerate(argv):        
        if '--path' in arg:                        
            file_path = argv[i+1]            
        elif '--sub' in arg:
            sub = dag_hyphen_parse('sub', argv[i+1])
        elif '--model' in arg:
            model = argv[i+1]            
        elif '--fs_dir' in arg:
            fs_dir = argv[i+1]  
        elif '--file_name' in arg:
            file_name = argv[i+1]
        elif '--rsq_th' in arg:
            rsq_th = float(argv[i+1])     
        elif '--do_not_open' in arg:
            open_fs = False
        elif '--pars_to_plot' in arg:
            pars_to_plot = argv[i+1]
            if ',' in pars_to_plot:
                pars_to_plot = pars_to_plot.split(',')
            if not isinstance(pars_to_plot, list):
                pars_to_plot = [pars_to_plot]            

        elif arg in ('-h', '--help'):
            print(main.__doc__)
            sys.exit()

        elif '--' in arg: # ********** ARBITRARY KWARGS **********
            # If argv[i] is an argument, then argv[i+1] is its value
            this_kwarg_value = dag_arg_checker(argv, i+1)
            # Add to kwargs
            this_kwarg = arg.replace('--','')
            extra_kwargs[this_kwarg] = this_kwarg_value
    
    if '/' in file_path:
        file_path_end = file_path.split('/')[-1]
    else:
        file_path_end = file_path

    # Load the fitting settings, add in the new info
    if sub is None:
        sub = 'sub-'
        sub += re.search(r'sub-(.*?)_', file_path_end).group(1)
        
    # Check for model info in the file path    
    if model is None:
        pattern = r'model-(.*?)*'
        model = re.search(pattern, file_path_end).group(1)


    if 'task' in file_path_end:
        pattern = r'task-(.*?)_'
        task = re.search(pattern, file_path_end).group(1)
    else:        
        task = ''

    if 'ses' in file_path_end:
        pattern = r'ses-(.*?)_'
        ses = re.search(pattern, file_path_end).group(1)
    else:        
        ses = ''

    if file_name is None:
        file_name = f'{sub}_{ses}_{model}_{task}'

    data_info = {
        'pars':[], 'prfpy_model':None, 'real_ts':None}

    if '.pkl' in file_path:
        with open(file_path, 'rb') as f:
            pickle_dict = pickle.load(f)
        for k in data_info.keys():
            if k in pickle_dict.keys():
                data_info[k] = pickle_dict[k]
    elif '.npy' in file_path:
        data_info['pars'] = np.load(file_path)
        

    # Make the mesh dash object
    fs = FSMaker(
        sub=sub, 
        fs_dir=fs_dir,
        )
    
    if model is not None:
        try:
            prf_obj = TSPlotter(
                prf_params=data_info['pars'],
                model=model,
                prfpy_model=data_info['prfpy_model'],
                real_ts = data_info['real_ts'],            
                incl_hrf=True, 
            )
        except:
            prf_obj = TSPlotter(
                prf_params=data_info['pars'],
                model=model,
                prfpy_model=data_info['prfpy_model'],
                real_ts = data_info['real_ts'],            
                incl_hrf=False, 
            )            
        if pars_to_plot is None:
            pars_to_plot = list(prf_obj.pd_params.keys())
        
        for p in pars_to_plot:
            data        = prf_obj.pd_params[p].to_numpy()
            data_mask   = prf_obj.pd_params['rsq'].to_numpy()>rsq_th
            if p=='pol':
                cmap = 'marco_pol'
                vmin,vmax = -np.pi, np.pi
                kwargs = dict(cmap=cmap, vmin=vmin, vmax=vmax)
            elif p=='ecc':
                cmap = 'ecc2'
                vmin,vmax = 0, 5
                kwargs = dict(cmap=cmap, vmin=vmin, vmax=vmax)
            elif p=='rsq':
                cmap='plasma'
                vmin,vmax = 0,1
                kwargs = dict(cmap=cmap, vmin=vmin, vmax=vmax)
            else:
                kwargs = {}
            
            fs.add_surface(
                data=data, 
                data_mask = data_mask,
                surf_name=f'{file_name}_{p}',  
                **kwargs,  
            )
    else:
        # We don't know what everything is... 
        # assume last column is rsq
        for p in np.arange(data_info['pars'].shape[1]):
            data        = data_info['pars'][:,p]
            data_mask   = data_info['pars'][:,-1]>rsq_th            
            fs.add_surface(
                data=data, 
                data_mask = data_mask, 
                surf_name=f'{file_name}_{p}',
            )
    if open_fs:
        fs.open_fs_surface(fs.surf_list, **extra_kwargs)


if __name__ == "__main__":
    main(sys.argv[1:])    


