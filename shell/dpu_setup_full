#!/usr/bin/env bash

export DPU_SETUP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export DPU_SETUP_FILE="${DPU_SETUP_DIR}/dpu_setup_full"  # copy to some location
export DPU_REPO_DIR=$(dirname ${DPU_SETUP_DIR})         # point to repo (arbitrary)
export DPU_PATH_HOME=$(dirname ${DPU_REPO_DIR})         # point to folder for temp/logs files

function check_function {
  FN=`type -t $1`

  if [[ -z ${FN} ]]; then
    echo 1
  else
    echo 0
  fi
}
# source helper functions
if [[ $1 == "setup" ]]; then

  echo "==================================================================================================="
  echo "                            SETUP SCRIPT FOR DAG PRF UTILS                              "
  echo "==================================================================================================="
  echo "Setting up ~/.bash_profile"
  # ignore permission changes in git
  git config core.fileMode false 2>/dev/null

  # make scripts executable
  chmod -R 2775 ${DPU_REPO_DIR}/bin 2>/dev/null
  chmod -R 2775 ${DPU_REPO_DIR}/shell 2>/dev/null

  if [ -f ~/.bash_profile ]; then
    search_for="source ${DPU_SETUP_FILE}"
    case `grep -Fx "${search_for}" ~/.bash_profile >/dev/null; echo $?` in
      0)
        # code if found
        # echo "Line already present"
        ;;
      1)
        # code if not found
        (
        echo 
        echo "# Inserted via the dag_prf_utils-repository"
        echo "source ${DPU_SETUP_FILE}"
        ) >> ~/.bash_profile
        ;;
      *)
        # code if an error occurred
        echo "ERROR: Could not complete setup.."
        ;;
    esac
  else
      (
      echo "# .bash_profile"
      echo "# Inserted via the dag_prf_utils-repository"
      echo "source ${DPU_SETUP_FILE}"
      ) >> ~/.bash_profile
  fi

  # check itksnap installation
  check_itksnap=`check_function itksnap`
  if [[ ${check_itksnap} -eq 1 ]]; then
    echo "Please install ITK-Snap here: \"https://sourceforge.net/projects/itk-snap/files/itk-snap/3.8.0\""
  else
    echo "Found ITK-Snap installation: `which itksnap`"
  fi

  # activate conda environment
  ACTIVATE_CONDA=0

  # mamba is faster; check if we can use it
  check_mamba=`check_function mamba`
  cmd="conda"
  if [[ ${check_mamba} -eq 0 ]]; then
    cmd="mamba"
  fi

  if [[ ${ACTIVATE_CONDA} -eq 1 ]]; then

    echo
    echo "---------------------------------------------------------------------------------------------------"
    echo "Dealing with conda environment"

    env_name="dag_prf"
    if [[ -z `conda info --envs | grep ${env_name}` ]]; then
      ${cmd} env create --file ${DPU_REPO_DIR}/shell/environment.yml --prefix=~/.conda/envs/${env_name}
      if [[ $? -ne 0 ]]; then
        echo "ERROR: conda install from environment.yml file did not complete"
        exit 1
      fi
    else
      echo "WARNING: conda environment \"${env_name}\" already exists. Edit \"env_name\" in setup file and rerun"
      exit 1
    fi
    conda activate ${env_name}
  fi

  # setup python packages
  declare -a INSTALL_PACKAGES=("pRFpy" "Nideconv" "Pymp2rage" "Pybest" "Hedfpy" "Pycortex" "prfpy_csenf")
  echo
  echo "---------------------------------------------------------------------------------------------------"
  echo "Checking installation of [${INSTALL_PACKAGES[@]}]"
  cd ${DPU_PATH_HOME}
  for package in ${INSTALL_PACKAGES[@]}; do

    check=`pip list | grep -F ${package,,}`
    if [[ -z ${check} ]]; then
      echo "INSTALLING: ${package}.."        
      if [ ! -d ${DPU_PATH_HOME}/${package,,} ]; then
        PACKAGE_LINK=`cat ${DPU_REPO_DIR}/shell/links.rst | grep ${package,,} | cut -d' ' -f3`
        git clone ${PACKAGE_LINK}
      fi
      cd ${DPU_PATH_HOME}/${package,,}
      python setup.py develop
      cd ..
    else
      echo "Found ${package} installation"
    fi
  done

  # scipy get installed by pip again, so uninstall and let mamba/conda sort it out
  pip uninstall scipy -y
  ${cmd} install -c conda-forge scipy -y

  # done
  echo "Done. Now enter: \"source ~/.bash_profile\""
fi

#===================================================================================================
# VARIABLES
#===================================================================================================
export FS_LICENSE=${REPO_DIR}/shell/license.txt                                  # this thing needs to be along the FPREP_BINDING path!

# PROJECT
export DIR_PROJECTS="" 
export PROJECT=""

#===================================================================================================
# PATHS
#===================================================================================================

export DIR_DATA_HOME=${DIR_PROJECTS}/${PROJECT}
export DIR_LOGS=${DIR_DATA_HOME}/code/logs
export DIR_DATA_SOURCE=${DIR_DATA_HOME}/sourcedata
export DIR_DATA_DERIV=${DIR_DATA_HOME}/derivatives
export SOURCEDATA=${DIR_DATA_HOME}
export DERIVATIVES=${DIR_DATA_DERIV}
export FS=${DIR_DATA_DERIV}/freesurfer
export SUBJECTS_DIR=${FS}
export CTX=${DIR_DATA_DERIV}/pycortex

# Make executables available in environment
export PATH=${PATH}:${DIR_SCRIPTS}/bin
export PATH=${PATH}:${DIR_SCRIPTS}/shell
